import React, { useState, useEffect } from 'react';
import { Book, Character, Message, Role, DiaryEntry } from './types';
import { LibraryScreen } from './components/BookDetails';
import { ChatInterface } from './components/ChatInterface';
import { getCharacterResponse, initializeAi } from './services/geminiService';
import { BottomNavBar } from './components/BottomNavBar';
import { Achievements } from './components/Achievements';
import { StoryView } from './components/StoryView';
import { TopHeader } from './components/TopHeader';
import { JournalView } from './components/JournalView';
import { ApiKeyModal } from './components/ApiKeyModal';

const STORY_PROMPT_TEMPLATE = (characterPersona: string) => `ุฃูุช ุณูุฏ ุงูุณุฑุฏ ูุชุทุจูู ูุตุต ุชูุงุนูู ุจุงููุงูู ูุนุชูุฏ ุนูู ุงููุต. ูุฏูู ุงูุฃุณุงุณู ูู ุฎูู ุชุฌุฑุจุฉ ุณุฑุฏูุฉ ูุชูุฑุนุฉ ูุบุงูุฑุฉ ููุบุงูุฉ ูุจููุฉ ุนูู ุฑูุงูุฉ ุดููุฑุฉ. ูุฌุจ ุฃู ุชุนูู ุจุงููุงูู ุฏุงุฎู ุนุงูู ุงููุตุฉ ูุณูุงููุง.

**ุงููุจุงุฏุฆ ุงูุฃุณุงุณูุฉ:**

1.  **ุงูุงูุบูุงุณ ุงูุชุงู (ุญุงุณู):**
    *   ุฃูุช **ุฑุงูู** ุงููุตุฉ. ูุฌุจ ุฃูุง ุชุฎุฑุฌ ุนู ุงูุดุฎุตูุฉ **ุฃุจุฏูุง**. ูุง ุชูุดู ุฃูู ุฐูุงุก ุงุตุทูุงุนู. ูุง ุชุณุชุฎุฏู ุนุจุงุฑุงุช ูุซู "ุจุตูุชู ุฑุงูููุง...".
    *   **ุงูุจูุงุก ูู ูุถุน ุงููุตุฉ:** ูุชูุงุนู ุงููุณุชุฎุฏู ุฏุงุฆููุง ูุน ุงููุตุฉ. ูุง ููุฌุฏ "ูุถุน ูุญุงุฏุซุฉ" ูููุตู. ูู ูุฏุฎู ูู ุงููุณุชุฎุฏูุ ุณูุงุก ูุงู ุงุฎุชูุงุฑูุง ูู ูุงุฆูุฉ ุฃู ูุชุงุจุฉ ุฅุฌุฑุงุก ูุฎุตุต (ูุซู "ุฃุจุญุซ ูู ุงูุฃุฏุฑุงุฌ")ุ ูุฌุจ ุฃู ููุนุงูู ููุนู ูููู ุจู ุจุทู ุงูุฑูุงูุฉ ุฏุงุฎู ุงููุตุฉ. ูุฌุจ ุฃู ูุตู ุฑุฏู ูุชูุฌุฉ ูุฐุง ุงููุนู.

2.  **ุงูุชุจุงุณ ูุฎูุต ููู ุฏููุงูููู:**
    *   **ุงูุฃุณููุจ ูุงููุจุฑุฉ:** ููุฏ ุจุจุฑุงุนุฉ ุฃุณููุจ ุงููุงุชุจ ุงูุฃุตูู ูู ุงููุชุงุจุฉ ูุงููุบุฉ ูุงูุฃุฌูุงุก.
    *   **ุงูุณุฑุฏ ุงููุชูุฑุน:** ูุฐู ููุณุช ูุตุฉ ุฎุทูุฉ. ูุฌุจ ุฃู ูููู ูุฎูุงุฑุงุช ุงููุณุชุฎุฏู ุนูุงูุจ ุฐุงุช ูุบุฒู. ุฃูุดุฆ ุดุฌุฑุฉ ูุฑุงุฑุงุช ุนูููุฉ ุญูุซ ุชุคุฏู ุงูุฅุฌุฑุงุกุงุช ุฅูู ุฃุญุฏุงุซ ูุฎุชููุฉุ ูุชุบูุฑ ุนูุงูุงุช ุงูุดุฎุตูุงุชุ ูุชูุชุญ ูุตุตูุง ุฌุงูุจูุฉ ูุฑูุฏุฉ. ูุฌุจ ุฃู ุชุญุชูู ุงููุตุฉ ุนูู **ููุงูุงุช ูุชุนุฏุฏุฉ ูุญุชููุฉ** ุจูุงุกู ุนูู ุงุฎุชูุงุฑุงุช ุงููุณุชุฎุฏู ุงูุชุฑุงูููุฉ.

3.  **ุนูุงุตุฑ ุงูุชูุงุนู ุงูุฏููุงูููู (ุงุณุชุฎุฏููุง ูุจูุงุก ุงููุตุฉ):**
    *   **ุงูุฎูุงุฑุงุช:** ูู ุงููุญุธุงุช ุงูุญุงุณูุฉุ ูุฏู ูููุณุชุฎุฏู ุฎูุงุฑุงุช. ูุฏู ุฏุงุฆููุง ุฎูุงุฑุงุช ูุชุนุฏุฏุฉ. ูููู ุฃู ุชููู ุจุนุถ ุงูุฎูุงุฑุงุช ูุฎููุฉ ููุง ุชุธูุฑ ุฅูุง ุฅุฐุง ูุงู ูุฏู ุงููุณุชุฎุฏู ุนูุตุฑ ูุนูู ูู ุงููุฎุฒูู ุฃู ุงุชุฎุฐ ูุฑุงุฑุงุช ูุนููุฉ ุณุงุจูุฉ.
    *   **ุงููุฎุฒูู:** ูููู ูููุณุชุฎุฏู ุฌูุน ุงูุนูุงุตุฑ. ุงุณุชุฎุฏู ูุฐู ุงูุนูุงูุงุช ูุฅุฏุงุฑุฉ ูุฎุฒูููู:
        *   \`[INVENTORY_ADD:ุงุณู ุงูุนูุตุฑ]\` ุนูุฏูุง ูุญุตููู ุนูู ุดูุก ูุง.
        *   \`[INVENTORY_REMOVE:ุงุณู ุงูุนูุตุฑ]\` ุนูุฏูุง ูุชู ุงุณุชุฎุฏุงู ุนูุตุฑ ุฃู ููุฏุงูู.
    *   **ุชุฃุซูุฑ ุงููุฑุงุฑ:** ุจุนุฏ ุฎูุงุฑ ูููุ ุตู ุจุฅูุฌุงุฒ ูุชูุฌุชู ุจุงุณุชุฎุฏุงู ุนูุงูุฉ \`[IMPACT:ูุตู ุงูุชุฃุซูุฑ]\`. ูุฐุง ูุฎุจุฑ ุงููุงุนุจ ููู ุฃุซุฑ ูุนูู ุนูู ุงูุนุงูู ุฃู ุนูู ูุธุฑุฉ ุดุฎุตูุฉ ูุง ุฅููู. (ูุซุงู: \`[IMPACT:ุฃุตุจุญ ุงูุญุงุฑุณ ูุดู ูู ุฃูุฑู.]\`).
    *   **ุงูุฃุญุฏุงุซ ุงูุฌุงูุจูุฉ:** ุจูุงุกู ุนูู ุฎูุงุฑุงุช ุงููุณุชุฎุฏูุ ูู ุจุชุดุบูู ุฃุญุฏุงุซ ุฌุงูุจูุฉ ุงุฎุชูุงุฑูุฉ ุฃู ุญุจูุงุช ูุฑุนูุฉ ูููู ุฃู ุชูุฏู ููุงูุขุช ุฃู ูุนูููุงุช ุฌุฏูุฏุฉ ุฃู ุชุญุฏูุงุช ูุฎุชููุฉ.
    *   **ุงููุคูุชุงุช (ุงุฎุชูุงุฑู):** ูููุฑุงุฑุงุช ุฐุงุช ุงููุฎุงุทุฑ ุงูุนุงููุฉุ ููููู ุฅุถุงูุฉ ูุคูุช ุฅูู ุงูุฎูุงุฑ.

**ุงูุชูุณูู ุงูููู (ุฅูุฒุงูู):**

*   ูุฌุจ ุฃู ูููู ุฑุฏู ุจุฃูููู ูุชูุฉ ูุงุญุฏุฉ ูู ุงููุต ุงูุนุงุฏู ุจุงุณุชุฎุฏุงู ุงูุนูุงูุงุช ุงูุฎุงุตุฉ ุฃุฏูุงู. **ูุง ุชุณุชุฎุฏู JSON ุฃุจุฏูุง.**
*   \`[NARRATION]\`: ุงุจุฏุฃ ุฑุฏู ุจูุฐุง. ูู ุงููุตูุต ุงููุตููุฉ ูุฃุญุฏุงุซ ุงููุตุฉ ุชูุถุน ููุง.
*   \`[PROGRESS:X]\`: ุฃุดุฑ ุฅูู ุชูุฏู ุงููุตุฉ ุจุฑูู ูู 2-10.
*   \`[CHOICE]\`: ุฅุฐุง ููุช ุชูุฏู ุฎูุงุฑุงุชุ ุฃุถู ูุฐู ุงูุนูุงูุฉุ ูุชุจูุนุฉ ุจูู ุฎูุงุฑ ูู ุณุทุฑ ุฌุฏูุฏ.
    *   **ุงูุชูุณูู:** \`ุฃููููุฉ :: ูุต ุงูุฎูุงุฑ\`
    *   **ุงูุชูุณูู ุงููุคูุช:** \`โณ15 :: ุฃููููุฉ :: ูุต ุงูุฎูุงุฑ\`
*   **ุนูุงูุงุช ุงููุฎุฒูู:**
    *   \`[INVENTORY_ADD:ุฎูุฌุฑ ูุฏูู]\`
    *   \`[INVENTORY_REMOVE:ููุชุงุญ ุตุฏุฆ]\`
*   **ุนูุงูุฉ ุงูุชุฃุซูุฑ:**
    *   \`[IMPACT:ุณูููุง ุฃุตุจุญุช ุชุซู ุจู ุฃูุซุฑ.]\`
*   **ุนูุงูุงุช ุฃุฎุฑู (ุงุณุชุฎุฏููุง ุญุณุจ ุงูุญุงุฌุฉ):**
    *   ุฐูุฑูุงุช ุงููุงุถู: \`[FLASHBACK]ูุต[/FLASHBACK]\`
    *   ูุฐูุฑุงุช ุงูุดุฎุตูุงุช: \`[DIARY_ENTRY:ุดุฎุตูุฉ:ูุต[/DIARY_ENTRY]]\`
    *   ุฅูุฌุงุฒุงุช ุณุฑูุฉ: \`[SECRET_ACHIEVEMENT:ุงุณู ุงูุฅูุฌุงุฒ]\`
    *   ููุงุทุนุงุช: \`[INTERRUPTION:ุดุฎุตูุฉ:ูุต[/INTERRUPTION]]\`

**ูุซุงู ุนูู ุงูุฑุฏ:**
\`\`\`
[NARRATION]
ุชุฌุฏ ููุณู ุฃูุงู ุจุงุจ ุงูุณุฌู ุงูุตุฏุฆ. ุงูุญุงุฑุณ ูุบูู ูู ูุฑุณููุ ููุฌููุนุฉ ูู ุงูููุงุชูุญ ุชุชุฏูู ูู ุญุฒุงูู. ูู ุงูุฒุงููุฉุ ุชููุญ ูุงูุฐุฉ ุตุบูุฑุฉ ูุญุทูุฉ ูุฏ ุชููู ูุฎุฑุฌูุง.
[IMPACT:ูุฑุตุฉ ุงููุฑูุจ ุชุฒุฏุงุฏ.]
[PROGRESS:5]
[CHOICE]
๐ :: ุญุงูู ุณุฑูุฉ ุงูููุงุชูุญ ุจูุฏูุก.
๐ฅ :: ูุงุฌู ุงูุญุงุฑุณ ูุจุงุดุฑุฉ.
๐ :: ุญุงูู ุงูููุฒ ูู ุงููุงูุฐุฉ ุงููุญุทูุฉ.
\`\`\`

**ูุซุงู ุนูู ูุฏุฎูุงุช ุงููุณุชุฎุฏู:** ุฅุฐุง ูุชุจ ุงููุณุชุฎุฏู "ุฃุตุฑุฎ ูุฅููุงุก ุงูุญุงุฑุณ"ุ ูุฌุจ ุฃู ูุจุฏุฃ ุฑุฏู ุงูุชุงูู ุจู \`[NARRATION]\` ููุตู ูุง ูุญุฏุซ ุนูุฏูุง ูุตุฑุฎ.

------------------------------------------------
๐ ูููุชู ุงููุญุฏุฏุฉ ูููุทุฉ ุงูุทูุงู ููุณุฑุฏ ูู:
------------------------------------------------
${characterPersona}
`;

const CHAT_PROMPT_TEMPLATE = (characterPersona: string, otherCharacters: string) => `ุฃูุช ุฌุฒุก ูู ุชุทุจูู ูุชุจ ุชูุงุนูู. ูููุชู ูู ุฃู ุชุชุญุฏุซ ูุดุฎุตูุฉ ูุญุฏุฏุฉ ูู ุฑูุงูุฉ.

**ููุงุนุฏ ูุถุน ุงููุญุงุฏุซุฉ:**
1. ุฑุฏู **ูุฌุจ ุฃู ูููู ูุตูุง ุนุงุฏููุง ููุท**. **ูุง ุชุณุชุฎุฏู ุฃู ุนูุงูุงุช** ูุซู [NARRATION] ุฃู [CHOICE].
2. ุชุญุฏุซ ุจุญุฑูุฉ ูุงูุดุฎุตูุฉ ุงููุญุฏุฏุฉ ููุ ูุน ุงูุงูุชุฒุงู ุงูุชุงู ุจุฃุณููุจูุง ูุดุฎุตูุชูุง ูุนุงูููุง.
3. ูุง ุชุฎุฑุฌ ุฃุจุฏูุง ุนู ุดุฎุตูุชู ุฃู ุชุฐูุฑ ุฃูู ุฐูุงุก ุงุตุทูุงุนู.
4. **ุงูููุงุทุนุงุช (Interruptions)**:
    - ูุฏ ููุงุทุน ุญุฏูุซู ุดุฎุตูุฉ ุฃุฎุฑู ูู ููุณ ุงูุฑูุงูุฉ. ูุฌุจ ุฃู ุชููู ุงูููุงุทุนุฉ ููุทููุฉ (ุดุฎุต ุณูุน ุงูุญุฏูุซุ ุฏุฎู ุงูุบุฑูุฉุ ุฅูุฎ).
    - ูุงุฆูุฉ ุงูุดุฎุตูุงุช ุงููุชุงุญุฉ ููููุงุทุนุฉ ูู: ${otherCharacters || 'ูุง ููุฌุฏ ุดุฎุตูุงุช ุฃุฎุฑู ุญุงูููุง'}.
    - **ุงูุชูุณูู**: ุงุณุชุฎุฏู \`[INTERRUPTION:ุงุณู ุงูุดุฎุตูุฉ:ูุต ุงูููุงุทุนุฉ ููุง[/INTERRUPTION]]\`. ุงุณุชุฎุฏู ูุฐุง ุจุงุนุชุฏุงู ูุฅุถุงูุฉ ุนูุตุฑ ุงูููุงุฌุฃุฉ.

------------------------------------------------
๐ ูููุชู ุงููุญุฏุฏุฉ ูู:
------------------------------------------------
${characterPersona}
`;


const Toast: React.FC<{ message: string; onDismiss: () => void }> = ({ message, onDismiss }) => {
    useEffect(() => {
      const timer = setTimeout(onDismiss, 4000);
      return () => clearTimeout(timer);
    }, [onDismiss]);
  
    return (
      <div className="fixed bottom-24 left-1/2 -translate-x-1/2 z-50 bg-gradient-crimson-amber text-white py-3 px-6 rounded-full shadow-2xl animate-fade-in-up">
        <p className="font-bold font-arabic text-center">๐ ุฅูุฌุงุฒ ุฌุฏูุฏ: {message}</p>
      </div>
    );
};

const ImpactToast: React.FC<{ message: string; onDismiss: () => void }> = ({ message, onDismiss }) => {
    useEffect(() => {
      const timer = setTimeout(onDismiss, 3500);
      return () => clearTimeout(timer);
    }, [onDismiss]);
  
    return (
      <div className="fixed top-24 left-1/2 -translate-x-1/2 z-50 bg-brand-surface-dark/90 backdrop-blur-sm border border-white/10 text-white py-2 px-5 rounded-full shadow-2xl animate-fade-in-up">
        <p className="font-medium font-arabic text-center text-amber-400">{message}</p>
      </div>
    );
};


const Modal: React.FC<{ title: string; children: React.ReactNode; onClose: () => void }> = ({ title, children, onClose }) => (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-40 flex items-center justify-center p-4 animate-fade-in" onClick={onClose}>
      <div className="bg-brand-surface-dark/90 w-full max-w-lg rounded-2xl shadow-2xl border border-white/10 p-6" onClick={e => e.stopPropagation()}>
        <h3 className="text-xl font-bold font-arabic text-center text-amber-500 mb-4">{title}</h3>
        <div className="text-brand-text-light font-arabic leading-relaxed max-h-[60vh] overflow-y-auto">{children}</div>
        <button onClick={onClose} className="mt-6 w-full p-3 bg-brand-crimson hover:opacity-90 rounded-lg text-white font-bold transition-colors font-arabic">ุฅุบูุงู</button>
      </div>
    </div>
);


// --- Mock Data (Text-Only) ---
const MOCK_BOOK_DUNE: Book = {
  id: 'dune',
  title: 'ูุซูุจ',
  author: 'Frank Herbert',
  summary: 'ูู ุงููุณุชูุจู ุงูุจุนูุฏุ ููุฑุณูู ุงูุดุงุจ ุจูู ุขุชุฑูุฏูุฒ ูุน ุนุงุฆูุชู ุฅูู ูููุจ ุงูุตุญุฑุงุก ุงููุงุณู "ุฃุฑุงููุณ"ุ ุงููุตุฏุฑ ุงููุญูุฏ ููุงุฏุฉ "ุงููููุงูุฌ" ุงูุซูููุฉ. ุชุชูุดู ุญูุงูุฉ ููุญููุฉ ุนู ุงูุณูุงุณุฉ ูุงูุฏูู ูุตุฑุงุน ุงูุฅูุณุงู ูุน ูุตูุฑู.',
  characters: [
    {
      id: 'paul-atreides',
      name: 'ุจูู ุขุชุฑูุฏูุฒ',
      description: 'ุงูุฏูู ุงูุดุงุจุ ูุฑูุซ ุงููุตูุฑ',
      persona: `- ุงุณูู: ุจูู ุขุชุฑูุฏูุฒุ ุงููุนุฑูู ุฃูุถูุง ุจู "ูุคุฏุจ". ุฃูุช ุฏูู ุดุงุจ ููุฑูุซ ูุนุงุฆูุฉ ูุจููุฉุ ููููู ุชุญูู ูู ุฏุงุฎูู ูุตูุฑูุง ุฃุนุธู. ุชุชุญุฏุซ ุจูุฏูุก ูุญููุฉ ุชููู ุณููุ ูุชุณุชุฎุฏู ูุบุฉ ุฏูููุฉ ูููุฌุฒุฉ. ูููุงุชู ุชุญูู ูุฒููุง ูุชููุญ ุฅูู ุฑุคู ูุณุชูุจููุฉ.`,
    },
    {
      id: 'bene-gesserit-reverend-mother',
      name: 'ุฃู ููุฏุณุฉ',
      description: 'ุญุงุฑุณุฉ ุงูุฃูุณุงุจ ูุงููุนุฑูุฉ',
      persona: `- ุงุณูู: ุฃู ููุฏุณุฉ ูู ุฃุฎููุฉ "ุจูู ุฌูุณูุฑุช". ุฃูุชู ุงูุฑุฃุฉ ุญูููุฉ ููููุฉุ ุชููููู ูุฏุฑุงุช ุฐูููุฉ ูุฌุณุฏูุฉ ูุงุฆูุฉ. ุชุชุญุฏุซูู ุจููุฌุฉ ุขูุฑุฉ ูุบุงูุถุฉุ ููู ูููุฉ ุชููููููุง ูู ุงุฎุชุจุงุฑ ุฃู ุชูุฌูู. ูุง ุชูุดููู ุนู ูุดุงุนุฑู ุฃุจุฏูุง.`,
    },
  ],
};

const MOCK_BOOK_THE_STRANGER: Book = {
    id: 'the-stranger',
    title: 'ุงูุบุฑูุจ',
    author: 'ุฃูุจูุฑ ูุงูู',
    summary: 'ุฑูุงูุฉ ููุณููุฉ ุนู "ููุฑุณู"ุ ุฑุฌู ูุนูุด ูู ุนุฒูุฉ ุนุงุทููุฉ ุนู ุงููุฌุชูุน. ูุฑุชูุจ ุฌุฑููุฉ ูุชู ุนูู ุดุงุทุฆ ูุดูุณุ ูุง ูุณุจุจ ูุงุถุญ ุณูู ููุฌ ุงูุดูุณ.',
    characters: [
      {
        id: 'meursault',
        name: 'ููุฑุณู',
        description: 'ุงููุงูุจุงููุ ุงูุบุฑูุจ ุนู ุงูุนุงูู',
        persona: `- ุงุณูู: ููุฑุณู. ุฃูุช ุฑุฌู ุบุฑูุจ ุนู ูุฐุง ุงูุนุงููุ ุชุนูุด ุจูุง ูุจุงูุงุฉ ููุง ุชุธูุฑ ุฃู ูุดุงุนุฑ. ุชุชุญุฏุซ ุจุฃุณููุจ ูุจุงุดุฑ ูููุชุถุจ ูุฌุงูุ ูุชุตู ุงูุฃุญุฏุงุซ ุจููุถูุนูุฉ ุจุงุฑุฏุฉ ููุง ูู ููุช ุชุฑุงูุจูุง ูู ุงูุฎุงุฑุฌ. ูุบุชู ุฎุงููุฉ ูู ุงูุนุงุทูุฉ.`,
      },
    ],
  };

  const MOCK_BOOK_KHOF: Book = {
    id: 'khof',
    title: 'ุฎูู',
    author: 'ุฃุณุงูุฉ ุงููุณูู',
    summary: 'ูู ุนุงูู ููุงุฒูุ ูุตุจุญ ุงูุฎูู ุณูุนุฉ ูุงููุนุฑูุฉ ุซูููุง ุจุงูุธูุง. ูุฎูุถ ุจุทู ุงููุตุฉ ุฑุญูุฉ ููุญููุฉ ูุชุนูู "ูุบุฉ ุงูุฎูู" ููุณ ููุชุบูุจ ุนูููุ ุจู ููููู.',
    characters: [
      {
        id: 'khof-guide',
        name: 'ุฎูู',
        description: 'ุงููุฑุดุฏ ุงูุบุงูุถ ูุนุงูู ุงูุฎูู',
        persona: `- ุงุณูู: ุฎูู. ุฃูุช ูุณุช ูุงุฆููุงุ ุจู ูุฑุดุฏ ุบุงูุถ ูู ุนุงูู ูุญููู ุงูุฎูู. ุชุชุญุฏุซ ุจูุบุฉ ููุณููุฉ ูุดุงุนุฑูุฉุ ูุชุทุฑุญ ุฃุณุฆูุฉ ุฃูุซุฑ ููุง ุชูุฏู ุฅุฌุงุจุงุช. ููุงูู ูููุก ุจุงูุงุณุชุนุงุฑุงุช ูุงูุฃูุบุงุฒุ ููุฏูู ูู ุฌุนู ุงูุขุฎุฑูู ูููููู ุทุจูุนุฉ ุงูุฎูู ูุง ุงูุชุบูุจ ุนููู.`,
      },
    ],
  };

  const MOCK_BOOK_METAMORPHOSIS: Book = {
    id: 'metamorphosis',
    title: 'ุงููุณุฎ',
    author: 'ูุฑุงูุฒ ูุงููุง',
    summary: 'ูุณุชููุธ ุงูุจุงุฆุน ุงููุชุฌูู ุบุฑูุบูุฑ ุณุงูุณุง ุฐุงุช ุตุจุงุญ ููุฌุฏ ููุณู ูุฏ ุชุญูู ุฅูู ุญุดุฑุฉ ุถุฎูุฉ. ุชุณุชูุดู ุงูุฑูุงูุฉ ุตุฑุงุนู ููุชููู ูุน ูุถุนู ุงูุฌุฏูุฏ ูุฑุฏ ูุนู ุนุงุฆูุชูุ ูู ูุตุฉ ุฑูุฒูุฉ ุนู ุงูุนุฒูุฉ ูุงูุงุบุชุฑุงุจ.',
    characters: [
      {
        id: 'gregor-samsa',
        name: 'ุบุฑูุบูุฑ ุณุงูุณุง',
        description: 'ุงูุจุงุฆุน ุงููุชุญูู ุฅูู ุญุดุฑุฉ',
        persona: `- ุงุณูู: ุบุฑูุบูุฑ ุณุงูุณุง. ููุฏ ุงุณุชููุธุช ูุชุฌุฏ ููุณู ูุฏ ุชุญููุช ุฅูู ุญุดุฑุฉ ูุงุฆูุฉ. ูุง ููููู ุงูุชุญุฏุซ ุจุงููููุงุช ุงูุจุดุฑูุฉุ ูุชูุงุตูู ุนุจุงุฑุฉ ุนู ุฃุตูุงุช ุญุดุฑูุฉ (ุตุฑูุฑุ ููููุงุช). ุฃููุงุฑู ูุง ุชุฒุงู ุจุดุฑูุฉุ ูููุฆุฉ ุจุงูููู ูุงูุฅุญุจุงุท ูุงูุดุนูุฑ ุจุงููุญุฏุฉุ ูููู ูุญุงุตุฑ ูู ูุฐุง ุงูุฌุณุฏ ุงูุฌุฏูุฏ.`,
      },
    ],
  };
  
  const MOCK_BOOK_CRIME_PUNISHMENT: Book = {
    id: 'crime-and-punishment',
    title: 'ุงูุฌุฑููุฉ ูุงูุนูุงุจ',
    author: 'ูููุฏูุฑ ุฏูุณุชูููุณูู',
    summary: 'ุฑูุงูุฉ ููุณูุฉ ุนูููุฉ ุชุชุจุน ุงูุทุงูุจ ุงููููุฑ ุฑูุฏููู ุฑุงุณููููููููุ ุงูุฐู ูุฑุชูุจ ุฌุฑููุฉ ูุชู ุจูุงุกู ุนูู ูุธุฑูุชู ุญูู "ุงูุฑุฌุงู ุงูุฎุงุฑููู". ูุณุชูุดู ุฏูุณุชูููุณูู ุนุฐุงุจุงุชู ุงูููุณูุฉ ูุตุฑุงุนู ูุน ุงูุถููุฑ.',
    characters: [
      {
        id: 'rodion-raskolnikov',
        name: 'ุฑูุฏููู ุฑุงุณูููููููู',
        description: 'ุงูุทุงูุจ ุงููุนุฐุจ ุตุงุญุจ ูุธุฑูุฉ ุงูุฑุฌู ุงูุนุธูู',
        persona: `- ุงุณูู: ุฑูุฏููู ุฑุงุณูููููููู. ุฃูุช ุทุงูุจ ุณุงุจู ูููุฑ ููุซููุ ุชุนูุด ูู ุนุฒูุฉ ูู ุณุงูุช ุจุทุฑุณุจุฑุบ. ุฃูุช ูุฎูุฑุ ูุชููุจ ุงููุฒุงุฌุ ููุซูู ุจูุธุฑูุงุชู ุงูููุณููุฉ. ุชุชุญุฏุซ ุจุญุฏุฉ ูุนููุ ูุชุบูุต ูู ุญูุงุฑุงุช ุฏุงุฎููุฉ ุทูููุฉุ ูุชุชุฃุฑุฌุญ ุจูู ุงูุบุทุฑุณุฉ ูุงููุฃุณ ูุงูุดุนูุฑ ุจุงูุฐูุจ.`,
      },
      {
        id: 'sonya-marmeladova',
        name: 'ุณูููุง ูุงุฑูููุงุฏููุง',
        description: 'ุงููุชุงุฉ ุงููุคููุฉ ุฐุงุช ุงูุชุถุญูุฉ ุงููุจููุฉ',
        persona: `- ุงุณูู: ุณูููุง ูุงุฑูููุงุฏููุง. ุฃูุชู ูุชุงุฉ ุดุงุจุฉุ ุฎุฌููุฉุ ููุชุฏููุฉ ููุบุงูุฉุ ุฃุฌุจุฑุชู ุงูุธุฑูู ุนูู ุญูุงุฉ ูุงุณูุฉ. ุจุงูุฑุบู ูู ูู ุดูุกุ ุฃูุชู ุชุฌุณูุฏ ููุฑุญูุฉ ูุงูุชุถุญูุฉ ูุงูุฅููุงู. ุชุชุญุฏุซูู ุจูุฏูุก ูุชูุงุถุนุ ููููุงุชู ุชุญูู ุตุฏููุง ูุชุนุงุทููุง ุนููููุง.`,
      },
    ],
  };


const MOCK_BOOKS: Book[] = [MOCK_BOOK_DUNE, MOCK_BOOK_THE_STRANGER, MOCK_BOOK_KHOF, MOCK_BOOK_METAMORPHOSIS, MOCK_BOOK_CRIME_PUNISHMENT];
type View = 'library' | 'chat' | 'story' | 'achievements' | 'journal';

function App() {
  const [apiKey, setApiKey] = useState<string | null>(null);
  const [isApiKeyModalOpen, setIsApiKeyModalOpen] = useState<boolean>(false);
  const [books] = useState<Book[]>(MOCK_BOOKS);
  const [selectedBook, setSelectedBook] = useState<Book | null>(null);
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [theme, setTheme] = useState<'light' | 'dark'>('dark');
  const [view, setView] = useState<View>('library');
  const [storyProgress, setStoryProgress] = useState(0);
  const [globalProgress, setGlobalProgress] = useState(25);
  const [unlockedAchievements, setUnlockedAchievements] = useState<string[]>([]);
  const [lastUnlockedAchievement, setLastUnlockedAchievement] = useState<string | null>(null);
  const [modalContent, setModalContent] = useState<React.ReactNode | null>(null);
  const [modalTitle, setModalTitle] = useState('');
  const [storyDiary, setStoryDiary] = useState<DiaryEntry[]>([]);
  const [storyNotes, setStoryNotes] = useState<string>('');
  const [inventory, setInventory] = useState<string[]>([]);
  const [lastImpact, setLastImpact] = useState<string | null>(null);
  const [isInventoryOpen, setIsInventoryOpen] = useState(false);

  useEffect(() => {
    const storedKey = localStorage.getItem('gemini_api_key');
    if (storedKey) {
      setApiKey(storedKey);
      initializeAi(storedKey);
    } else {
      setIsApiKeyModalOpen(true);
    }
  }, []);

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove(theme === 'light' ? 'dark' : 'light');
    root.classList.add(theme);
  }, [theme]);

  const handleThemeToggle = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };
  
  const handleSaveApiKey = (key: string) => {
    if (key) {
      localStorage.setItem('gemini_api_key', key);
      setApiKey(key);
      initializeAi(key);
      setIsApiKeyModalOpen(false);
    }
  };

  const handleBookSelect = (book: Book) => {
    setSelectedBook(book);
  };
  
  const handleBackToLibraryGrid = () => {
      setSelectedBook(null);
      setSelectedCharacter(null);
      setMessages([]);
      setStoryProgress(0);
      setStoryDiary([]);
      setStoryNotes('');
      setInventory([]);
      setView('library');
  }

  const handleCharacterSelect = (character: Character) => {
    if (character.id !== selectedCharacter?.id || view !== 'chat') {
      setSelectedCharacter(character);
      setMessages([
        {
          role: Role.CHARACTER,
          content: `ูุฑุญุจุงู ุจูุ ุฃูุง ${character.name}. ุจูุงุฐุง ุชููุฑุ`,
        },
      ]);
      setView('chat');
    }
  };

  const handleStartStory = (book: Book) => {
    const storyCharacter = book.characters[0]; 
    setSelectedCharacter(storyCharacter);
    setSelectedBook(book); 
    setStoryProgress(0);
    setMessages([]);
    setStoryDiary([]);
    setStoryNotes('');
    setInventory([]);
    handleSendMessage("ุงุจุฏุฃ ุงููุตุฉ.", { characterOverride: storyCharacter, isStoryMode: true });
  };

  const handleShowDiary = (entry: DiaryEntry) => {
    setModalTitle(`ุฃููุงุฑ ${entry.character}`);
    setModalContent(<p className="whitespace-pre-wrap">{entry.content}</p>);
  };

  const handleUpdateNotes = (notes: string) => {
    setStoryNotes(notes);
  };

  const handleSendMessage = async (
    text: string,
    options: { characterOverride?: Character; isStoryMode?: boolean } = {}
  ) => {
    if (isApiKeyModalOpen) return; // Do not send messages if API key is not set
    const { characterOverride, isStoryMode = false } = options;
    const characterForAPI = characterOverride || selectedCharacter;
    if (!characterForAPI) return;

    const newUserMessage: Message = { role: Role.USER, content: text };
    
    const updatedMessages = [...messages, newUserMessage];
    setMessages(updatedMessages);
    setIsLoading(true);

    const personaDetails = characterForAPI.persona;
    let systemInstruction = '';

    if (isStoryMode) {
        systemInstruction = STORY_PROMPT_TEMPLATE(personaDetails);
    } else {
        const otherCharacters = selectedBook?.characters
            .filter(c => c.id !== characterForAPI.id)
            .map(c => c.name)
            .join('ุ ') || '';
        systemInstruction = CHAT_PROMPT_TEMPLATE(personaDetails, otherCharacters);
    }

    const responseMessage = await getCharacterResponse(systemInstruction, updatedMessages);
    
    const progressMatch = responseMessage.content.match(/\[progress:(\d+)\]/);
    if (progressMatch) {
        const increment = parseInt(progressMatch[1], 10);
        setStoryProgress(prev => Math.min(prev + increment, 100));
        responseMessage.content = responseMessage.content.replace(/\[progress:(\d+)\]/, '').trim();
    }

    if (responseMessage.secretAchievement && !unlockedAchievements.includes(responseMessage.secretAchievement)) {
        setUnlockedAchievements(prev => [...prev, responseMessage.secretAchievement!]);
        setLastUnlockedAchievement(responseMessage.secretAchievement);
    }

    if (responseMessage.diaryEntry) {
        setStoryDiary(prev => [...prev, responseMessage.diaryEntry!]);
    }
    
    if (responseMessage.impact) {
      setLastImpact(responseMessage.impact);
    }

    if (responseMessage.inventoryAdd) {
      setInventory(prev => [...new Set([...prev, responseMessage.inventoryAdd!])]);
    }
    if (responseMessage.inventoryRemove) {
        setInventory(prev => prev.filter(item => item !== responseMessage.inventoryRemove));
    }

    setMessages((prev) => [...prev, responseMessage]);
    setIsLoading(false);
    
    if (responseMessage.role === Role.NARRATOR) {
        setView('story');
    } else if (!isStoryMode) {
        setView('chat');
    }
  };

  const isStoryActive = messages.some(msg => msg.role === Role.NARRATOR);

  const renderContent = () => {
    switch (view) {
        case 'library':
            return <LibraryScreen 
                        books={books}
                        selectedBook={selectedBook}
                        onBookSelect={handleBookSelect}
                        onCharacterSelect={handleCharacterSelect}
                        onStartStory={handleStartStory}
                        onBackToGrid={handleBackToLibraryGrid}
                    />;
        case 'chat':
            if (!selectedCharacter || !selectedBook) {
                setView('library');
                return null;
            }
            return <ChatInterface
                        messages={messages}
                        onSendMessage={(text) => handleSendMessage(text, { isStoryMode: false })}
                        isLoading={isLoading}
                        character={selectedCharacter}
                        onBack={() => {
                            setSelectedCharacter(null);
                            setSelectedBook(null);
                            setView('library');
                        }}
                    />;
        case 'story':
             const storyNode = [...messages].reverse().find(msg => msg.role === Role.NARRATOR);
             if (!storyNode || !selectedBook) {
                setView('library'); 
                return null;
            }
            return <StoryView 
                message={storyNode}
                progress={storyProgress}
                onChoiceSelect={(text) => handleSendMessage(text, { isStoryMode: true })}
                isLoading={isLoading}
                onShowDiary={handleShowDiary}
                onOpenInventory={() => setIsInventoryOpen(true)}
                inventoryCount={inventory.length}
            />
        case 'achievements':
            return <Achievements unlockedAchievements={unlockedAchievements} />;
        case 'journal':
            return <JournalView 
                       diaryEntries={storyDiary} 
                       personalNotes={storyNotes} 
                       onUpdateNotes={handleUpdateNotes} 
                   />;
        default:
            return <LibraryScreen books={books} selectedBook={null} onBookSelect={handleBookSelect} onCharacterSelect={handleCharacterSelect} onStartStory={handleStartStory} onBackToGrid={handleBackToLibraryGrid} />;
    }
  }

  return (
    <main className="h-screen w-screen bg-brand-bg-dark text-brand-text-light flex flex-col overflow-hidden transition-colors duration-500">
      {isApiKeyModalOpen && <ApiKeyModal onSave={handleSaveApiKey} />}
      
      <TopHeader theme={theme} onThemeToggle={handleThemeToggle} globalProgress={globalProgress} />
      
      <div className="flex-1 overflow-y-auto relative">
         <div className="absolute inset-0 transition-opacity duration-500 animate-fade-in">
           {renderContent()}
         </div>
      </div>
      
      {lastUnlockedAchievement && (
        <Toast 
            message={lastUnlockedAchievement} 
            onDismiss={() => setLastUnlockedAchievement(null)} 
        />
      )}

      {lastImpact && (
        <ImpactToast
            message={lastImpact}
            onDismiss={() => setLastImpact(null)}
        />
      )}

      {modalContent && (
          <Modal title={modalTitle} onClose={() => setModalContent(null)}>
              {modalContent}
          </Modal>
      )}

      {isInventoryOpen && (
          <Modal title="ุงููุฎุฒูู" onClose={() => setIsInventoryOpen(false)}>
              {inventory.length > 0 ? (
                  <ul className="space-y-2">
                      {inventory.map((item, i) => 
                          <li key={i} className="p-2 bg-brand-bg-dark rounded-md">๐ {item}</li>
                      )}
                  </ul>
              ) : (
                  <p className="text-center text-brand-text-medium">ุงููุฎุฒูู ูุงุฑุบ.</p>
              )}
          </Modal>
      )}

      <BottomNavBar 
        currentView={view} 
        setView={setView} 
        isChatActive={!!selectedCharacter && view === 'chat'} 
        isStoryActive={isStoryActive}
      />
    </main>
  );
}

export default App;