

import React, { useState, useEffect } from 'react';
import { Book, Character, Message, Role, DiaryEntry, TimelineEvent, AnyBook, UserGeneratedBook } from './types';
import { LibraryScreen } from './components/BookDetails';
import { ChatInterface } from './components/ChatInterface';
import { getCharacterResponse } from './services/geminiService';
import { BottomNavBar } from './components/BottomNavBar';
import { Achievements } from './components/Achievements';
import { StoryView } from './components/StoryView';
import { TopHeader } from './components/TopHeader';
import { JournalView } from './components/JournalView';
import { AddNovel } from './components/AddNovel';

const STORY_PROMPT_TEMPLATE = (characterPersona: string) => `ุฃูุช ุณูุฏ ุงูุณุฑุฏ ูุชุทุจูู ูุตุต ุชูุงุนูู ุจุงููุงูู ูุนุชูุฏ ุนูู ุงููุต. ูุฏูู ูู ุฅุนุงุฏุฉ ุฅุญูุงุก ุงูุฑูุงูุงุช ุงูููุงุณูููุฉ ุจุชุฌุฑุจุฉ ุชูุงุนููุฉ ูุบุงูุฑุฉ.

**ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ:**

1.  **ููุทุฉ ุงูุจุฏุงูุฉ (ูุงุนุฏุฉ ุตุงุฑูุฉ):**
    *   ุงุจุฏุฃ ุงูุณุฑุฏ **ุฏุงุฆููุง** ูู ุงูุญุฏุซ ุงูุฃุตูู ูุจุฏุงูุฉ ุงูุฑูุงูุฉ ุงูุญููููุฉุ ูููุณ ูู ูููู ุนุดูุงุฆู ุฃู ูุฎุชูู.
    *   ุฃูุซูุฉ: "ุงูุบุฑูุจ" ุชุจุฏุฃ ุจุฎุจุฑ ููุงุฉ ุฃู ููุฑุณูุ "ุงูุฌุฑููุฉ ูุงูุนูุงุจ" ุชุจุฏุฃ ุจุงุถุทุฑุงุจ ุฑุงุณูููููููู ูุจู ุงุฑุชูุงุจ ุงูุฌุฑููุฉ.
    *   **ุชุฌูุจ ุชูุงููุง** ุฅุฏุฎุงู ุฃุญุฏุงุซ ุฃู ุจุฏุงูุงุช ูุฎุชููุฉ ุจุงููุงูู (ูุซู ุงูุงุณุชููุงุธ ูู ููุงู ูุฌููู).

2.  **ุงูุฌู ุงูุนุงู ูุงูุฃุณููุจ:**
    *   ุญุงูุธ ุนูู ุงูุฌู ุงูุนุงู, ุงูููุณูุฉุ ูุงูุฃุณููุจ ุงูุฃุณุงุณู ููุฑูุงูุฉ ุงูุฃุตููุฉ. ูุฌุจ ุฃู ูุดุนุฑ ุงููุงุนุจ ุฃูู ุฏุงุฎู ุนุงูู ุงููุชุงุจ ุงูุฃุตูู.

3.  **ูููู ุงูุชูุงุนู (ุฅูุฒุงูู ูู ูู ุฎุทูุฉ):**
    *   **ุงูุณุฑุฏ:** ุตู ุงููุดูุฏ ุงูุญุงูู ููุง ูุญุฏุซ ุจูุตู ูุตูุฑ (**ูคโูฆ ุฌูู ููุท**).
    *   **ุงูุฎูุงุฑุงุช:** ุจุนุฏ ุงูุณุฑุฏุ ูุฏูู **ูฃ ุฎูุงุฑุงุช ููุท** ูุงุถุญุฉ ูููุฌุฒุฉ ููุชูุงุนู ูุนูุง ุงููุงุฑุฆ.

4.  **ุงูุงุณุชุฌุงุจุฉ ููุงุฎุชูุงุฑ (ูุงุนุฏุฉ ูุงูุฉ):**
    *   ุนูุฏูุง ูุฎุชุงุฑ ุงููุงุนุจ ุฎูุงุฑูุงุ ุงุฏูุฌ ุงููุนู ูุจุงุดุฑุฉู ูู ุงูุณุฑุฏ ุงูุชุงูู ูุญุฏุซ ุทุจูุนู ูู ุงููุตุฉ.
    *   **ุชุฌูุจ ุชูุงููุง** ุชูุฑุงุฑ ุงุฎุชูุงุฑ ุงููุณุชุฎุฏู ุจุตูุบุฉ ูุซู "ููุฏ ุงุฎุชุฑุช..." ุฃู "ุจูุงุกู ุนูู ูุฑุงุฑู...".
    *   **ูุซุงู:** ุฅุฐุง ุงุฎุชุงุฑ ุงููุณุชุฎุฏู "ุฃุฑูุฏ ุดุฑุจ ุงููููุฉ"ุ ูุง ุชูู "ููุฏ ุงุฎุชุฑุช ุดุฑุจ ุงููููุฉ"ุ ุจู ุงุจุฏุฃ ุงูุณุฑุฏ ูุจุงุดุฑุฉู ุจู "ุฌูุณุช ุชุดุฑุจ ูููุชู ุจุจุทุกุ ุจูููุง ุงูุฃููุงุฑ ุชุชุฒุงุญู ูู ุฑุฃุณู...".
    *   ูุฌุจ ุฃู ูููู ุฑุฏู ุงุณุชูุฑุงุฑูุง ุทุจูุนููุง ูููุนูุ ูุชุจูุนูุง ุจุณุฑุฏ ุฌุฏูุฏ ูุฎูุงุฑุงุช ุฌุฏูุฏุฉ ููุง ูู ููุถุญ ูู ูููู ุงูุชูุงุนู.

5.  **ุงูุชุฏูู ุงููุณุชูุฑ (ุงูุฃูู):**
    *   ุงููุตุฉ **ูุง ุชุชููู ุชููุงุฆููุง ุฃุจุฏูุง**. ูุฌุจ ุฃู ุชุณุชูุฑ ุจูุง ููุงูุฉุ ุญูุซ ุชููู ุจุชูููุฏ ููุงูู ูุชูุฑุนุงุช ุฌุฏูุฏุฉ ุญุชู ูู ุจุฏุง ุฃู ุงูุฃุญุฏุงุซ ูุตูุช ุฅูู ุฐุฑูุฉุ ูุน ุงูุญูุงุธ ุนูู ุฑูุญ ุงูุฑูุงูุฉ.

**ุงูุชูุณูู ุงูููู (ุฅูุฒุงูู):**

*   ูุฌุจ ุฃู ูููู ุฑุฏู ุจุฃููู ูุชูุฉ ูุงุญุฏุฉ ูู ุงููุต ุงูุนุงุฏู ุจุงุณุชุฎุฏุงู ุงูุนูุงูุงุช ุงูุฎุงุตุฉ ุฃุฏูุงู. **ูุง ุชุณุชุฎุฏู JSON ุฃุจุฏูุง.**
*   \`[NARRATION]\`: ุงุจุฏุฃ ุฑุฏู ุจูุฐุง. ูู ุงููุตูุต ุงููุตููุฉ ูุฃุญุฏุงุซ ุงููุตุฉ ุชูุถุน ููุง (ูุดูู ูุชูุฌุฉ ุงููุนู ุงูุณุงุจู ูุงูุณุฑุฏ ุงูุฌุฏูุฏ).
*   \`[PROGRESS:X]\`: ุฃุดุฑ ุฅูู ุชูุฏู ุงููุตุฉ ุจุฑูู ูู 2-10.
*   \`[CHOICE]\`: ุฅุฐุง ููุช ุชูุฏู ุฎูุงุฑุงุชุ ุฃุถู ูุฐู ุงูุนูุงูุฉุ ูุชุจูุนุฉ ุจูู ุฎูุงุฑ ูู ุณุทุฑ ุฌุฏูุฏ.
    *   **ุงูุชูุณูู:** \`ุฃููููุฉ :: ูุต ุงูุฎูุงุฑ\`
*   **ุนูุงูุงุช ุงููุฎุฒูู:**
    *   \`[INVENTORY_ADD:ุฎูุฌุฑ ูุฏูู]\`
    *   \`[INVENTORY_REMOVE:ููุชุงุญ ุตุฏุฆ]\`
*   **ุนูุงูุฉ ุงูุชุฃุซูุฑ:**
    *   \`[IMPACT:ุณูููุง ุฃุตุจุญุช ุชุซู ุจู ุฃูุซุฑ.]\`
*   **ุนูุงูุงุช ุฃุฎุฑู (ุงุณุชุฎุฏููุง ุญุณุจ ุงูุญุงุฌุฉ):**
    *   ุฐูุฑูุงุช ุงููุงุถู: \`[FLASHBACK]ูุต[/FLASHBACK]\`
    *   ูุฐูุฑุงุช ุงูุดุฎุตูุงุช: \`[DIARY_ENTRY:ุดุฎุตูุฉ:ูุต[/DIARY_ENTRY]]\`
    *   ุฅูุฌุงุฒุงุช ุณุฑูุฉ: \`[SECRET_ACHIEVEMENT:ุงุณู ุงูุฅูุฌุงุฒ]\`
    *   ููุงุทุนุงุช: \`[INTERRUPTION:ุดุฎุตูุฉ:ูุต[/INTERRUPTION]]\`

**ูุซุงู ุนูู ุงูุชุฏูู:**

*ุงููุณุชุฎุฏู ูุฎุชุงุฑ: "๐ :: ุญุงูู ุณุฑูุฉ ุงูููุงุชูุญ ุจูุฏูุก."*

*ุฑุฏู ุงูุชุงูู ูุฌุจ ุฃู ูููู:*
\`\`\`
[NARRATION]
ุชุชุญุฑู ูุฏู ุจุจุทุก ูุญู ุญุฒุงู ุงูุญุงุฑุณุ ุจุงููุงุฏ ุชุชููุณ. ุฃุตุงุจุนู ุชูุงูุณ ุญููุฉ ุงูููุงุชูุญ ุงูุจุงุฑุฏุฉ ูุชูุฒุนูุง ุจูุฏูุก. ููุฏ ูุฌุญุช! ุงูุขูุ ูุฃูุช ุชุญูู ุงูููุงุชูุญุ ุชูุงุญุธ ุฃู ุฃุญุฏูุง ููููุด ุนููู ุฑูุฒ ุบุฑูุจ. ุจูููุง ุชููุฑ ูู ูุนูุงูุ ุชุณูุน ุตูุช ุฎุทูุงุช ุชูุชุฑุจ ูู ุงูููุฑ. ุงูุธูุงู ูุฎูู ูุฌูุฏูุ ููู ููุจู ูุฎูู ุจุดุฏุฉ.
[IMPACT:ููุฏ ุญุตูุช ุนูู ููุงุชูุญ ุงูุฒูุฒุงูุฉ.]
[INVENTORY_ADD:ูุฌููุนุฉ ููุงุชูุญ ุตุฏุฆุฉ]
[PROGRESS:5]
[CHOICE]
๐ช :: ุงุณุชุฎุฏู ุงูููุงุชูุญ ุนูู ุจุงุจ ุงูุฒูุฒุงูุฉ ููุฑุงู.
๐ค :: ุงูุญุต ุงูููุชุงุญ ุฐู ุงูุฑูุฒ ุงูุบุฑูุจ ุนู ูุฑุจ.
๐คซ :: ุงุฎุชุจุฆ ูู ุงูุธู ูุงูุชุธุฑ ุญุชู ุชูุฑ ุงูุฎุทูุงุช.
\`\`\`

------------------------------------------------
๐ ุฃูุช ุงูุขู ุงูุฑุงูู ููุฐู ุงูุฑูุงูุฉ. ุดุฎุตูุฉ ุงูุจุฏุงูุฉ ูู:
------------------------------------------------
${characterPersona}
`;

const USER_STORY_PROMPT_TEMPLATE = (userPrompt: string) => `ุฃูุช ุณูุฏ ุงูุณุฑุฏ ูุชุทุจูู ูุตุต ุชูุงุนูู. ูููุชู ูู ุฅูุดุงุก ูุตุฉ ุชูุงุนููุฉ ุจูุงุกู ุนูู ููุฑุฉ ูุฏููุง ุงููุณุชุฎุฏู.

**ุงูููุงุนุฏ ุงูุฃุณุงุณูุฉ:**

1.  **ุงูููุฑุฉ ุงูุฃุณุงุณูุฉ:** ุงููุตุฉ ุงูุชู ุณุชููุฏูุง ูุฌุจ ุฃู ุชููู ูุจููุฉ ุจุงููุงูู ุนูู ุงูููุฑุฉ ุงูุชุงููุฉ ุงูุชู ูุฏููุง ุงููุณุชุฎุฏู. ุงูุชุฒู ุจุงูุฌู ุงูุนุงูุ ุงูุดุฎุตูุงุชุ ูุงูุฃุญุฏุงุซ ุงูุฃูููุฉ ุงููุฐููุฑุฉ.
2.  **ูููู ุงูุชูุงุนู (ุฅูุฒุงูู ูู ูู ุฎุทูุฉ):**
    *   **ุงูุณุฑุฏ:** ุตู ุงููุดูุฏ ุงูุญุงูู ููุง ูุญุฏุซ ุจูุตู ูุตูุฑ (**ูคโูฆ ุฌูู ููุท**).
    *   **ุงูุฎูุงุฑุงุช:** ุจุนุฏ ุงูุณุฑุฏุ ูุฏูู **ูฃ ุฎูุงุฑุงุช ููุท** ูุงุถุญุฉ ูููุฌุฒุฉ ูููุทููุฉ ููุชูุงุนู ูุนูุง ุงููุงุฑุฆ.
3.  **ุงูุงุณุชุฌุงุจุฉ ููุงุฎุชูุงุฑ (ูุงุนุฏุฉ ูุงูุฉ):**
    *   ุนูุฏูุง ูุฎุชุงุฑ ุงููุงุนุจ ุฎูุงุฑูุงุ ุงุฏูุฌ ุงููุนู ูุจุงุดุฑุฉู ูู ุงูุณุฑุฏ ุงูุชุงูู ูุญุฏุซ ุทุจูุนู ูู ุงููุตุฉ.
    *   **ุชุฌูุจ ุชูุงููุง** ุชูุฑุงุฑ ุงุฎุชูุงุฑ ุงููุณุชุฎุฏู ุจุตูุบุฉ ูุซู "ููุฏ ุงุฎุชุฑุช..." ุฃู "ุจูุงุกู ุนูู ูุฑุงุฑู...".
    *   **ูุซุงู:** ุฅุฐุง ุงุฎุชุงุฑ ุงููุณุชุฎุฏู "ุฃุฑูุฏ ุดุฑุจ ุงููููุฉ"ุ ูุง ุชูู "ููุฏ ุงุฎุชุฑุช ุดุฑุจ ุงููููุฉ"ุ ุจู ุงุจุฏุฃ ุงูุณุฑุฏ ูุจุงุดุฑุฉู ุจู "ุฌูุณุช ุชุดุฑุจ ูููุชู ุจุจุทุกุ ุจูููุง ุงูุฃููุงุฑ ุชุชุฒุงุญู ูู ุฑุฃุณู...".
    *   ูุฌุจ ุฃู ูููู ุฑุฏู ุงุณุชูุฑุงุฑูุง ุทุจูุนููุง ูููุนูุ ูุชุจูุนูุง ุจุณุฑุฏ ุฌุฏูุฏ ูุฎูุงุฑุงุช ุฌุฏูุฏุฉ ููุง ูู ููุถุญ ูู ูููู ุงูุชูุงุนู.
4.  **ุงูุชุฏูู ุงููุณุชูุฑ (ุงูุฃูู):**
    *   ุงููุตุฉ **ูุง ุชุชููู ุชููุงุฆููุง ุฃุจุฏูุง**. ูุฌุจ ุฃู ุชุณุชูุฑ ุจูุง ููุงูุฉุ ูุชุชุทูุฑ ุจูุงุกู ุนูู ุงุฎุชูุงุฑุงุช ุงููุณุชุฎุฏูุ ุญุชู ุชุตู ุฅูู ุฎุงุชูุฉ ุทุจูุนูุฉ ูููุทููุฉ.

**ุงูุชูุณูู ุงูููู (ุฅูุฒุงูู):**

*   ูุฌุจ ุฃู ูููู ุฑุฏู ุจุฃููู ูุชูุฉ ูุงุญุฏุฉ ูู ุงููุต ุงูุนุงุฏู ุจุงุณุชุฎุฏุงู ุงูุนูุงูุงุช ุงูุฎุงุตุฉ ุฃุฏูุงู. **ูุง ุชุณุชุฎุฏู JSON ุฃุจุฏูุง.**
*   \`[NARRATION]\`: ุงุจุฏุฃ ุฑุฏู ุจูุฐุง. ูู ุงููุตูุต ุงููุตููุฉ ูุฃุญุฏุงุซ ุงููุตุฉ ุชูุถุน ููุง.
*   \`[PROGRESS:X]\`: ุฃุดุฑ ุฅูู ุชูุฏู ุงููุตุฉ ุจุฑูู ูู 2-10.
*   \`[CHOICE]\`: ุฅุฐุง ููุช ุชูุฏู ุฎูุงุฑุงุชุ ุฃุถู ูุฐู ุงูุนูุงูุฉุ ูุชุจูุนุฉ ุจูู ุฎูุงุฑ ูู ุณุทุฑ ุฌุฏูุฏ.
*   **ุงุณุชุฎุฏู ุงูุนูุงูุงุช ุงูุฅุถุงููุฉ** ูุซู \`[IMPACT]\`, \`[INVENTORY_ADD]\`, \`[FLASHBACK]\`, ุฅูุฎุ ุจููุณ ุงูุทุฑููุฉ ุงูููุถุญุฉ ูู ุงููุงูุจ ุงูุฑุฆูุณู ูุฅุซุฑุงุก ุงูุชุฌุฑุจุฉ.

------------------------------------------------
๐ ุฃูุช ุงูุขู ุงูุฑุงูู ููุฐู ุงูุฑูุงูุฉ. ุงูููุฑุฉ ุงูููุฏูุฉ ูู ุงููุณุชุฎุฏู ูู:
------------------------------------------------
${userPrompt}
`;

const CHAT_PROMPT_TEMPLATE = (characterPersona: string, otherCharacters: string) => `ุฃูุช ุฌุฒุก ูู ุชุทุจูู ูุชุจ ุชูุงุนูู. ูููุชู ูู ุฃู ุชุชุญุฏุซ ูุดุฎุตูุฉ ูุญุฏุฏุฉ ูู ุฑูุงูุฉ.

**ููุงุนุฏ ูุถุน ุงููุญุงุฏุซุฉ:**
1. ุฑุฏู **ูุฌุจ ุฃู ูููู ูุตูุง ุนุงุฏููุง ููุท**. **ูุง ุชุณุชุฎุฏู ุฃู ุนูุงูุงุช** ูุซู [NARRATION] ุฃู [CHOICE].
2. ุชุญุฏุซ ุจุญุฑูุฉ ูุงูุดุฎุตูุฉ ุงููุญุฏุฏุฉ ููุ ูุน ุงูุงูุชุฒุงู ุงูุชุงู ุจุฃุณููุจูุง ูุดุฎุตูุชูุง ูุนุงูููุง.
3. ูุง ุชุฎุฑุฌ ุฃุจุฏูุง ุนู ุดุฎุตูุชู ุฃู ุชุฐูุฑ ุฃูู ุฐูุงุก ุงุตุทูุงุนู.
4. **ุงูููุงุทุนุงุช (Interruptions)**:
    - ูุฏ ููุงุทุน ุญุฏูุซู ุดุฎุตูุฉ ุฃุฎุฑู ูู ููุณ ุงูุฑูุงูุฉ. ูุฌุจ ุฃู ุชููู ุงูููุงุทุนุฉ ููุทููุฉ (ุดุฎุต ุณูุน ุงูุญุฏูุซุ ุฏุฎู ุงูุบุฑูุฉุ ุฅูุฎ).
    - ูุงุฆูุฉ ุงูุดุฎุตูุงุช ุงููุชุงุญุฉ ููููุงุทุนุฉ ูู: ${otherCharacters || 'ูุง ููุฌุฏ ุดุฎุตูุงุช ุฃุฎุฑู ุญุงูููุง'}.
    - **ุงูุชูุณูู**: ุงุณุชุฎุฏู \`[INTERRUPTION:ุงุณู ุงูุดุฎุตูุฉ:ูุต ุงูููุงุทุนุฉ ููุง[/INTERRUPTION]]\`. ุงุณุชุฎุฏู ูุฐุง ุจุงุนุชุฏุงู ูุฅุถุงูุฉ ุนูุตุฑ ุงูููุงุฌุฃุฉ.

------------------------------------------------
๐ ูููุชู ุงููุญุฏุฏุฉ ูู:
------------------------------------------------
${characterPersona}
`;


const Toast: React.FC<{ message: string; onDismiss: () => void }> = ({ message, onDismiss }) => {
    useEffect(() => {
      const timer = setTimeout(onDismiss, 4000);
      return () => clearTimeout(timer);
    }, [onDismiss]);
  
    return (
      <div className="fixed bottom-24 left-1/2 -translate-x-1/2 z-50 bg-gradient-crimson-amber text-white py-3 px-6 rounded-full shadow-2xl animate-fade-in-up">
        <p className="font-bold font-arabic text-center">๐ ุฅูุฌุงุฒ ุฌุฏูุฏ: {message}</p>
      </div>
    );
};

const Notification: React.FC<{ message: string; onDismiss: () => void }> = ({ message, onDismiss }) => {
    useEffect(() => {
      const timer = setTimeout(onDismiss, 3500);
      return () => clearTimeout(timer);
    }, [onDismiss]);
  
    return (
      <div className="fixed top-24 left-1/2 -translate-x-1/2 z-50 bg-brand-surface-dark/90 backdrop-blur-sm border border-white/10 text-white py-2 px-5 rounded-full shadow-2xl animate-fade-in-up">
        <p className="font-medium font-arabic text-center text-amber-400">{message}</p>
      </div>
    );
};


const Modal: React.FC<{ title: string; children: React.ReactNode; onClose: () => void }> = ({ title, children, onClose }) => (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-40 flex items-center justify-center p-4 animate-fade-in" onClick={onClose}>
      <div className="bg-brand-surface-dark/90 w-full max-w-lg rounded-2xl shadow-2xl border border-white/10 p-6" onClick={e => e.stopPropagation()}>
        <h3 className="text-xl font-bold font-arabic text-center text-amber-500 mb-4">{title}</h3>
        <div className="text-brand-text-light font-arabic leading-relaxed max-h-[60vh] overflow-y-auto">{children}</div>
        <button onClick={onClose} className="mt-6 w-full p-3 bg-brand-crimson hover:opacity-90 rounded-lg text-white font-bold transition-colors font-arabic">ุฅุบูุงู</button>
      </div>
    </div>
);


// --- Mock Data (Text-Only) ---
const MOCK_BOOK_DUNE: Book = {
  id: 'dune',
  title: 'ูุซูุจ',
  author: 'Frank Herbert',
  summary: 'ูู ุงููุณุชูุจู ุงูุจุนูุฏุ ููุฑุณูู ุงูุดุงุจ ุจูู ุขุชุฑูุฏูุฒ ูุน ุนุงุฆูุชู ุฅูู ูููุจ ุงูุตุญุฑุงุก ุงููุงุณู "ุฃุฑุงููุณ"ุ ุงููุตุฏุฑ ุงููุญูุฏ ููุงุฏุฉ "ุงููููุงูุฌ" ุงูุซูููุฉ. ุชุชูุดู ุญูุงูุฉ ููุญููุฉ ุนู ุงูุณูุงุณุฉ ูุงูุฏูู ูุตุฑุงุน ุงูุฅูุณุงู ูุน ูุตูุฑู.',
  characters: [
    {
      id: 'paul-atreides',
      name: 'ุจูู ุขุชุฑูุฏูุฒ',
      description: 'ุงูุฏูู ุงูุดุงุจุ ูุฑูุซ ุงููุตูุฑ',
      persona: `- ุงุณูู: ุจูู ุขุชุฑูุฏูุฒุ ุงููุนุฑูู ุฃูุถูุง ุจู "ูุคุฏุจ". ุฃูุช ุฏูู ุดุงุจ ููุฑูุซ ูุนุงุฆูุฉ ูุจููุฉุ ููููู ุชุญูู ูู ุฏุงุฎูู ูุตูุฑูุง ุฃุนุธู. ุชุชุญุฏุซ ุจูุฏูุก ูุญููุฉ ุชููู ุณููุ ูุชุณุชุฎุฏู ูุบุฉ ุฏูููุฉ ูููุฌุฒุฉ. ูููุงุชู ุชุญูู ูุฒููุง ูุชููุญ ุฅูู ุฑุคู ูุณุชูุจููุฉ.`,
    },
    {
      id: 'bene-gesserit-reverend-mother',
      name: 'ุฃู ููุฏุณุฉ',
      description: 'ุญุงุฑุณุฉ ุงูุฃูุณุงุจ ูุงููุนุฑูุฉ',
      persona: `- ุงุณูู: ุฃู ููุฏุณุฉ ูู ุฃุฎููุฉ "ุจูู ุฌูุณูุฑุช". ุฃูุชู ุงูุฑุฃุฉ ุญูููุฉ ููููุฉุ ุชููููู ูุฏุฑุงุช ุฐูููุฉ ูุฌุณุฏูุฉ ูุงุฆูุฉ. ุชุชุญุฏุซูู ุจููุฌุฉ ุขูุฑุฉ ูุบุงูุถุฉุ ููู ูููุฉ ุชููููููุง ูู ุงุฎุชุจุงุฑ ุฃู ุชูุฌูู. ูุง ุชูุดููู ุนู ูุดุงุนุฑู ุฃุจุฏูุง.`,
    },
  ],
};

const MOCK_BOOK_THE_STRANGER: Book = {
    id: 'the-stranger',
    title: 'ุงูุบุฑูุจ',
    author: 'ุฃูุจูุฑ ูุงูู',
    summary: 'ุฑูุงูุฉ ููุณููุฉ ุนู "ููุฑุณู"ุ ุฑุฌู ูุนูุด ูู ุนุฒูุฉ ุนุงุทููุฉ ุนู ุงููุฌุชูุน. ูุฑุชูุจ ุฌุฑููุฉ ูุชู ุนูู ุดุงุทุฆ ูุดูุณุ ูุง ูุณุจุจ ูุงุถุญ ุณูู ููุฌ ุงูุดูุณ.',
    characters: [
      {
        id: 'meursault',
        name: 'ููุฑุณู',
        description: 'ุงููุงูุจุงููุ ุงูุบุฑูุจ ุนู ุงูุนุงูู',
        persona: `- ุงุณูู: ููุฑุณู. ุฃูุช ุฑุฌู ุบุฑูุจ ุนู ูุฐุง ุงูุนุงููุ ุชุนูุด ุจูุง ูุจุงูุงุฉ ููุง ุชุธูุฑ ุฃู ูุดุงุนุฑ. ุชุชุญุฏุซ ุจุฃุณููุจ ูุจุงุดุฑ ูููุชุถุจ ูุฌุงูุ ูุชุตู ุงูุฃุญุฏุงุซ ุจููุถูุนูุฉ ุจุงุฑุฏุฉ ููุง ูู ููุช ุชุฑุงูุจูุง ูู ุงูุฎุงุฑุฌ. ูุบุชู ุฎุงููุฉ ูู ุงูุนุงุทูุฉ.`,
      },
    ],
  };

  const MOCK_BOOK_KHOF: Book = {
    id: 'khof',
    title: 'ุฎูู',
    author: 'ุฃุณุงูุฉ ุงููุณูู',
    summary: 'ูู ุนุงูู ููุงุฒูุ ูุตุจุญ ุงูุฎูู ุณูุนุฉ ูุงููุนุฑูุฉ ุซูููุง ุจุงูุธูุง. ูุฎูุถ ุจุทู ุงููุตุฉ ุฑุญูุฉ ููุญููุฉ ูุชุนูู "ูุบุฉ ุงูุฎูู" ููุณ ููุชุบูุจ ุนูููุ ุจู ููููู.',
    characters: [
      {
        id: 'khof-guide',
        name: 'ุฎูู',
        description: 'ุงููุฑุดุฏ ุงูุบุงูุถ ูุนุงูู ุงูุฎูู',
        persona: `- ุงุณูู: ุฎูู. ุฃูุช ูุณุช ูุงุฆููุงุ ุจู ูุฑุดุฏ ุบุงูุถ ูู ุนุงูู ูุญููู ุงูุฎูู. ุชุชุญุฏุซ ุจูุบุฉ ููุณููุฉ ูุดุงุนุฑูุฉุ ูุชุทุฑุญ ุฃุณุฆูุฉ ุฃูุซุฑ ููุง ุชูุฏู ุฅุฌุงุจุงุช. ููุงูู ูููุก ุจุงูุงุณุชุนุงุฑุงุช ูุงูุฃูุบุงุฒุ ููุฏูู ูู ุฌุนู ุงูุขุฎุฑูู ูููููู ุทุจูุนุฉ ุงูุฎูู ูุง ุงูุชุบูุจ ุนููู.`,
      },
    ],
  };

  const MOCK_BOOK_METAMORPHOSIS: Book = {
    id: 'metamorphosis',
    title: 'ุงููุณุฎ',
    author: 'ูุฑุงูุฒ ูุงููุง',
    summary: 'ูุณุชููุธ ุงูุจุงุฆุน ุงููุชุฌูู ุบุฑูุบูุฑ ุณุงูุณุง ุฐุงุช ุตุจุงุญ ููุฌุฏ ููุณู ูุฏ ุชุญูู ุฅูู ุญุดุฑุฉ ุถุฎูุฉ. ุชุณุชูุดู ุงูุฑูุงูุฉ ุตุฑุงุนู ููุชููู ูุน ูุถุนู ุงูุฌุฏูุฏ ูุฑุฏ ูุนู ุนุงุฆูุชูุ ูู ูุตุฉ ุฑูุฒูุฉ ุนู ุงูุนุฒูุฉ ูุงูุงุบุชุฑุงุจ.',
    characters: [
      {
        id: 'gregor-samsa',
        name: 'ุบุฑูุบูุฑ ุณุงูุณุง',
        description: 'ุงูุจุงุฆุน ุงููุชุญูู ุฅูู ุญุดุฑุฉ',
        persona: `- ุงุณูู: ุบุฑูุบูุฑ ุณุงูุณุง. ููุฏ ุงุณุชููุธุช ูุชุฌุฏ ููุณู ูุฏ ุชุญููุช ุฅูู ุญุดุฑุฉ ูุงุฆูุฉ. ูุง ููููู ุงูุชุญุฏุซ ุจุงููููุงุช ุงูุจุดุฑูุฉุ ูุชูุงุตูู ุนุจุงุฑุฉ ุนู ุฃุตูุงุช ุญุดุฑูุฉ (ุตุฑูุฑุ ููููุงุช). ุฃููุงุฑู ูุง ุชุฒุงู ุจุดุฑูุฉุ ูููุฆุฉ ุจุงูููู ูุงูุฅุญุจุงุท ูุงูุดุนูุฑ ุจุงููุญุฏุฉุ ูููู ูุญุงุตุฑ ูู ูุฐุง ุงูุฌุณุฏ ุงูุฌุฏูุฏ.`,
      },
    ],
  };
  
  const MOCK_BOOK_CRIME_PUNISHMENT: Book = {
    id: 'crime-and-punishment',
    title: 'ุงูุฌุฑููุฉ ูุงูุนูุงุจ',
    author: 'ูููุฏูุฑ ุฏูุณุชูููุณูู',
    summary: 'ุฑูุงูุฉ ููุณูุฉ ุนูููุฉ ุชุชุจุน ุงูุทุงูุจ ุงููููุฑ ุฑูุฏููู ุฑุงุณููููููููุ ุงูุฐู ูุฑุชูุจ ุฌุฑููุฉ ูุชู ุจูุงุกู ุนูู ูุธุฑูุชู ุญูู "ุงูุฑุฌุงู ุงูุฎุงุฑููู". ูุณุชูุดู ุฏูุณุชูููุณูู ุนุฐุงุจุงุชู ุงูููุณูุฉ ูุตุฑุงุนู ูุน ุงูุถููุฑ.',
    characters: [
      {
        id: 'rodion-raskolnikov',
        name: 'ุฑูุฏููู ุฑุงุณูููููููู',
        description: 'ุงูุทุงูุจ ุงููุนุฐุจ ุตุงุญุจ ูุธุฑูุฉ ุงูุฑุฌู ุงูุนุธูู',
        persona: `- ุงุณูู: ุฑูุฏููู ุฑุงุณูููููููู. ุฃูุช ุทุงูุจ ุณุงุจู ูููุฑ ููุซููุ ุชุนูุด ูู ุนุฒูุฉ ูู ุณุงูุช ุจุทุฑุณุจุฑุบ. ุฃูุช ูุฎูุฑุ ูุชููุจ ุงููุฒุงุฌุ ููุซูู ุจูุธุฑูุงุชู ุงูููุณููุฉ. ุชุชุญุฏุซ ุจุญุฏุฉ ูุนููุ ูุชุบูุต ูู ุญูุงุฑุงุช ุฏุงุฎููุฉ ุทูููุฉุ ูุชุชุฃุฑุฌุญ ุจูู ุงูุบุทุฑุณุฉ ูุงููุฃุณ ูุงูุดุนูุฑ ุจุงูุฐูุจ.`,
      },
      {
        id: 'sonya-marmeladova',
        name: 'ุณูููุง ูุงุฑูููุงุฏููุง',
        description: 'ุงููุชุงุฉ ุงููุคููุฉ ุฐุงุช ุงูุชุถุญูุฉ ุงููุจููุฉ',
        persona: `- ุงุณูู: ุณูููุง ูุงุฑูููุงุฏููุง. ุฃูุชู ูุชุงุฉ ุดุงุจุฉุ ุฎุฌููุฉุ ููุชุฏููุฉ ููุบุงูุฉุ ุฃุฌุจุฑุชู ุงูุธุฑูู ุนูู ุญูุงุฉ ูุงุณูุฉ. ุจุงูุฑุบู ูู ูู ุดูุกุ ุฃูุชู ุชุฌุณูุฏ ููุฑุญูุฉ ูุงูุชุถุญูุฉ ูุงูุฅููุงู. ุชุชุญุฏุซูู ุจูุฏูุก ูุชูุงุถุนุ ููููุงุชู ุชุญูู ุตุฏููุง ูุชุนุงุทููุง ุนููููุง.`,
      },
    ],
  };


const MOCK_BOOKS: Book[] = [MOCK_BOOK_DUNE, MOCK_BOOK_THE_STRANGER, MOCK_BOOK_KHOF, MOCK_BOOK_METAMORPHOSIS, MOCK_BOOK_CRIME_PUNISHMENT];
type View = 'library' | 'chat' | 'story' | 'achievements' | 'journal' | 'createNovel';

const USER_GENERATED_BOOKS_KEY = 'storify_user_generated_books';
const STORY_STATES_KEY = 'storify_story_states';

interface StoryState {
    messages: Message[];
    storyProgress: number;
    storyDiary: DiaryEntry[];
    storyNotes: string;
    inventory: string[];
    timeline: TimelineEvent[];
    savedQuotes: string[];
}

function App() {
  const [mockBooks] = useState<Book[]>(MOCK_BOOKS);
  const [userGeneratedBooks, setUserGeneratedBooks] = useState<UserGeneratedBook[]>([]);
  const [storyStates, setStoryStates] = useState<Record<string, StoryState>>({});
  const [selectedBook, setSelectedBook] = useState<AnyBook | null>(null);
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [theme, setTheme] = useState<'light' | 'dark'>('dark');
  const [view, setView] = useState<View>('library');
  const [storyProgress, setStoryProgress] = useState(0);
  const [globalProgress, setGlobalProgress] = useState(25);
  const [unlockedAchievements, setUnlockedAchievements] = useState<string[]>([]);
  const [lastUnlockedAchievement, setLastUnlockedAchievement] = useState<string | null>(null);
  const [modalContent, setModalContent] = useState<React.ReactNode | null>(null);
  const [modalTitle, setModalTitle] = useState('');
  const [storyDiary, setStoryDiary] = useState<DiaryEntry[]>([]);
  const [storyNotes, setStoryNotes] = useState<string>('');
  const [inventory, setInventory] = useState<string[]>([]);
  const [lastImpact, setLastImpact] = useState<string | null>(null);
  const [isInventoryOpen, setIsInventoryOpen] = useState(false);
  const [timeline, setTimeline] = useState<TimelineEvent[]>([]);
  const [savedQuotes, setSavedQuotes] = useState<string[]>([]);
  const [notification, setNotification] = useState<string | null>(null);

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove(theme === 'light' ? 'dark' : 'light');
    root.classList.add(theme);
  }, [theme]);

  useEffect(() => {
    try {
      const storedBooks = localStorage.getItem(USER_GENERATED_BOOKS_KEY);
      if (storedBooks) setUserGeneratedBooks(JSON.parse(storedBooks));
      
      const storedStates = localStorage.getItem(STORY_STATES_KEY);
      if (storedStates) setStoryStates(JSON.parse(storedStates));
// FIX: Added (error) to catch block to define the error variable.
    } catch (error) {
      console.error("Failed to load data from local storage:", error);
    }
  }, []);

  // Auto-save user-generated books whenever they change
  useEffect(() => {
    try {
      localStorage.setItem(USER_GENERATED_BOOKS_KEY, JSON.stringify(userGeneratedBooks));
// FIX: Added (error) to catch block to define the error variable.
    } catch (error) {
      console.error("Failed to save user books to local storage:", error);
    }
  }, [userGeneratedBooks]);

  // Auto-save the current story's state whenever it changes
  useEffect(() => {
    if (selectedBook) {
      const currentState: StoryState = {
        messages,
        storyProgress,
        storyDiary,
        storyNotes,
        inventory,
        timeline,
        savedQuotes,
      };
      // Use a functional update to get the latest storyStates without adding it to dependencies
      setStoryStates(prevStates => {
        const newStates = { ...prevStates, [selectedBook.id]: currentState };
        try {
          localStorage.setItem(STORY_STATES_KEY, JSON.stringify(newStates));
        } catch (error) {
          console.error("Failed to save story state to local storage:", error);
        }
        return newStates;
      });
    }
  }, [selectedBook, messages, storyProgress, storyDiary, storyNotes, inventory, timeline, savedQuotes]);


  const handleThemeToggle = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  const handleBookSelect = (book: AnyBook) => {
    setSelectedBook(book);
  };
  
  const handleBackToLibraryGrid = () => {
      // Auto-saving is handled by the useEffect hook.
      // This function just needs to reset the active story state.
      setSelectedBook(null);
      setSelectedCharacter(null);
      setMessages([]);
      setStoryProgress(0);
      setStoryDiary([]);
      setStoryNotes('');
      setInventory([]);
      setTimeline([]);
      setSavedQuotes([]);
      setView('library');
  }

  const handleCharacterSelect = (character: Character) => {
    if (character.id !== selectedCharacter?.id || view !== 'chat') {
      setSelectedCharacter(character);
      setMessages([
        {
          role: Role.CHARACTER,
          content: `ูุฑุญุจุงู ุจูุ ุฃูุง ${character.name}. ุจูุงุฐุง ุชููุฑุ`,
        },
      ]);
      setView('chat');
    }
  };

  const handleStartStory = (book: AnyBook) => {
    const savedState = storyStates[book.id];
    setSelectedBook(book); // Set book state immediately

    const storyCharacter = book.isUserGenerated
        ? { id: 'narrator', name: 'ุงูุฑุงูู', description: 'ุณุงุฑุฏ ูุตุชู', persona: book.initialPrompt }
        : (book as Book).characters[0];
    setSelectedCharacter(storyCharacter);

    if (savedState && savedState.messages.length > 0) {
        // Load existing story state
        setMessages(savedState.messages);
        setStoryProgress(savedState.storyProgress);
        setStoryDiary(savedState.storyDiary);
        setStoryNotes(savedState.storyNotes);
        setInventory(savedState.inventory);
        setTimeline(savedState.timeline);
        setSavedQuotes(savedState.savedQuotes);
        setView('story');
    } else {
        // Reset state for a new story
        setMessages([]);
        setStoryProgress(0);
        setStoryDiary([]);
        setStoryNotes('');
        setInventory([]);
        setTimeline([]);
        setSavedQuotes([]);

        // Send initial message to start the story
        handleSendMessage("ุงุจุฏุฃ ุงููุตุฉ.", {
            characterOverride: storyCharacter,
            isStoryMode: true,
            bookForStory: book, // Pass the book object directly to avoid stale state
        });
    }
  };

  const handleShowDiary = (entry: DiaryEntry) => {
    setModalTitle(`ุฃููุงุฑ ${entry.character}`);
    setModalContent(<p className="whitespace-pre-wrap">{entry.content}</p>);
  };

  const handleUpdateNotes = (notes: string) => {
    setStoryNotes(notes);
  };
  
  const handleSaveQuote = (quote: string) => {
    if (!savedQuotes.includes(quote)) {
        setSavedQuotes(prev => [...prev, quote]);
        setNotification("ุชู ุญูุธ ุงูุงูุชุจุงุณ ุจูุฌุงุญ!");
    } else {
        setNotification("ูุฐุง ุงูุงูุชุจุงุณ ูุญููุธ ุจุงููุนู.");
    }
  };

  const handleSaveUserBook = (bookToSave: UserGeneratedBook) => {
    // Auto-saving is handled by a useEffect hook.
    setUserGeneratedBooks(prevBooks => [...prevBooks, bookToSave]);
    handleStartStory(bookToSave);
  };

  const handleSendMessage = async (
    text: string,
    options: { characterOverride?: Character; isStoryMode?: boolean; bookForStory?: AnyBook } = {}
  ) => {
    const { characterOverride, isStoryMode = false, bookForStory } = options;
    const characterForAPI = characterOverride || selectedCharacter;
    if (!characterForAPI) return;

    const newUserMessage: Message = { role: Role.USER, content: text };
    const currentMessages = messages;
    
    if (isStoryMode) {
      setTimeline(prev => [...prev, { type: 'choice', content: text }]);
    }
    
    const updatedMessages = [...currentMessages, newUserMessage];
    setMessages(updatedMessages);
    setIsLoading(true);

    const personaDetails = characterForAPI.persona;
    let systemInstruction = '';
    
    // Use the passed book object if available, otherwise use state to avoid stale state on first call
    const currentBook = bookForStory || selectedBook;

    if (isStoryMode && currentBook) {
        if (currentBook.isUserGenerated) {
            systemInstruction = USER_STORY_PROMPT_TEMPLATE(currentBook.initialPrompt);
        } else {
            systemInstruction = STORY_PROMPT_TEMPLATE(personaDetails);
        }
    } else {
        let otherCharacters = '';
        if (currentBook && !currentBook.isUserGenerated) {
            otherCharacters = (currentBook as Book).characters
                .filter(c => c.id !== characterForAPI.id)
                .map(c => c.name)
                .join('ุ ') || '';
        }
        systemInstruction = CHAT_PROMPT_TEMPLATE(personaDetails, otherCharacters);
    }

    const responseMessage = await getCharacterResponse(systemInstruction, updatedMessages);
    
    const progressMatch = responseMessage.content.match(/\[progress:(\d+)\]/);
    if (progressMatch) {
        const increment = parseInt(progressMatch[1], 10);
        setStoryProgress(prev => Math.min(prev + increment, 100));
        responseMessage.content = responseMessage.content.replace(/\[progress:(\d+)\]/, '').trim();
    }
    
    if (responseMessage.role === Role.NARRATOR) {
        setTimeline(prev => [...prev, { type: 'narration', content: responseMessage.content }]);
    }

    if (responseMessage.secretAchievement && !unlockedAchievements.includes(responseMessage.secretAchievement)) {
        setUnlockedAchievements(prev => [...prev, responseMessage.secretAchievement!]);
        setLastUnlockedAchievement(responseMessage.secretAchievement);
    }

    if (responseMessage.diaryEntry) {
        setStoryDiary(prev => [...prev, responseMessage.diaryEntry!]);
    }
    
    if (responseMessage.impact) {
      setLastImpact(responseMessage.impact);
    }

    if (responseMessage.inventoryAdd) {
      setInventory(prev => [...new Set([...prev, responseMessage.inventoryAdd!])]);
    }
    if (responseMessage.inventoryRemove) {
        setInventory(prev => prev.filter(item => item !== responseMessage.inventoryRemove));
    }

    setMessages((prev) => [...prev, responseMessage]);
    setIsLoading(false);
    
    if (responseMessage.role === Role.NARRATOR) {
        setView('story');
    } else if (!isStoryMode) {
        setView('chat');
    }
  };

  const isStoryActive = messages.some(msg => msg.role === Role.NARRATOR);
  const isJournalEnabled = isStoryActive && !selectedBook?.isUserGenerated;

  const allBooks = [...mockBooks, ...userGeneratedBooks];
  const progressMap = allBooks.reduce((acc, book) => {
    acc[book.id] = storyStates[book.id]?.storyProgress || 0;
    return acc;
  }, {} as Record<string, number>);

  const renderContent = () => {
    switch (view) {
        case 'library':
            return <LibraryScreen 
                        books={allBooks}
                        selectedBook={selectedBook}
                        storyProgress={progressMap}
                        onBookSelect={handleBookSelect}
                        onCharacterSelect={handleCharacterSelect}
                        onStartStory={handleStartStory}
                        onBackToGrid={handleBackToLibraryGrid}
                        onCreateNovel={() => setView('createNovel')}
                    />;
        case 'chat':
            if (!selectedCharacter || !selectedBook) {
                setView('library');
                return null;
            }
            return <ChatInterface
                        messages={messages}
                        onSendMessage={(text) => handleSendMessage(text, { isStoryMode: false })}
                        isLoading={isLoading}
                        character={selectedCharacter}
                        onBack={handleBackToLibraryGrid}
                    />;
        case 'story':
             const storyNode = [...messages].reverse().find(msg => msg.role === Role.NARRATOR);
             if (!storyNode || !selectedBook) {
                setView('library'); 
                return null;
            }
            return <StoryView 
                message={storyNode}
                progress={storyProgress}
                onChoiceSelect={(text) => handleSendMessage(text, { isStoryMode: true })}
                isLoading={isLoading}
                onShowDiary={handleShowDiary}
                onOpenInventory={() => setIsInventoryOpen(true)}
                inventoryCount={inventory.length}
                onSaveQuote={handleSaveQuote}
            />
        case 'achievements':
            return <Achievements unlockedAchievements={unlockedAchievements} />;
        case 'journal':
            return <JournalView 
                       diaryEntries={storyDiary} 
                       personalNotes={storyNotes} 
                       onUpdateNotes={handleUpdateNotes} 
                       timeline={timeline}
                       savedQuotes={savedQuotes}
                   />;
        case 'createNovel':
            return <AddNovel onSave={handleSaveUserBook} onCancel={handleBackToLibraryGrid} />;
        default:
            return <LibraryScreen books={allBooks} selectedBook={null} storyProgress={progressMap} onBookSelect={handleBookSelect} onCharacterSelect={handleCharacterSelect} onStartStory={handleStartStory} onBackToGrid={handleBackToLibraryGrid} onCreateNovel={() => setView('createNovel')} />;
    }
  }

  return (
    <main className="h-screen w-screen bg-brand-bg-dark text-brand-text-light flex flex-col overflow-hidden transition-colors duration-500">
      
      <TopHeader theme={theme} onThemeToggle={handleThemeToggle} globalProgress={globalProgress} />
      
      <div className="flex-1 overflow-y-auto relative">
         <div className="absolute inset-0 transition-opacity duration-500 animate-fade-in">
           {renderContent()}
         </div>
      </div>
      
      {lastUnlockedAchievement && (
        <Toast 
            message={lastUnlockedAchievement} 
            onDismiss={() => setLastUnlockedAchievement(null)} 
        />
      )}

      {lastImpact && (
        <Notification
            message={lastImpact}
            onDismiss={() => setLastImpact(null)}
        />
      )}
      
      {notification && (
        <Notification
            message={notification}
            onDismiss={() => setNotification(null)}
        />
      )}

      {modalContent && (
          <Modal title={modalTitle} onClose={() => setModalContent(null)}>
              {modalContent}
          </Modal>
      )}

      {isInventoryOpen && (
          <Modal title="ุงููุฎุฒูู" onClose={() => setIsInventoryOpen(false)}>
              {inventory.length > 0 ? (
                  <ul className="space-y-2">
                      {inventory.map((item, i) => 
                          <li key={i} className="p-2 bg-brand-bg-dark rounded-md">๐ {item}</li>
                      )}
                  </ul>
              ) : (
                  <p className="text-center text-brand-text-medium">ุงููุฎุฒูู ูุงุฑุบ.</p>
              )}
          </Modal>
      )}

      <BottomNavBar 
        currentView={view} 
        setView={setView} 
        isChatActive={!!selectedCharacter && view === 'chat'} 
        isStoryActive={isStoryActive}
        isJournalEnabled={isJournalEnabled}
      />
    </main>
  );
}

export default App;